def optimal_bst(p, q, n):
    e = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    w = [[0 for _ in range(n + 1)] for _ in range(n + 1)]

    for i in range(n + 1):
        e[i][i] = q[i]
        w[i][i] = q[i]

    for l in range(1, n + 1): 
        for i in range(n - l + 1):
            j = i + l
            e[i][j] = float('inf')
            w[i][j] = w[i][j - 1] + p[j - 1] + q[j]

            for r in range(i + 1, j + 1):
                t = e[i][r - 1] + e[r][j] + w[i][j]
                if t < e[i][j]:
                    e[i][j] = t

    return e[0][n]

n = int(input("Enter number of book IDs: "))
keys = list(map(int, input("Enter sorted book IDs: ").split()))
p = list(map(float, input("Enter probabilities of successful searches (p[i]): ").split()))
q = list(map(float, input("Enter probabilities of unsuccessful searches (q[i]): ").split()))

min_cost = optimal_bst(p, q, n)
print(f"Minimum expected cost of OBST = {min_cost:.4f}")
